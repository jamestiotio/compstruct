// Lab 4: 2-States Parenthesis Matcher Turing Machine
// Reference implementation: https://cs.stackexchange.com/a/11058

// checkoff "6004.csail.mit.edu/currentsemester/6004assignment.doit" "Lab #4" 1103641864
// checkoff "192.168.2.16:8000/checkoff/50002assignment.doit" "Lab #4" 1103641864
// checkoff "10.1.3.25/checkoff/50002assignment.doit" "Lab #4" 1103641864
checkoff "dsl1.sutd.edu.sg/checkoff/50002assignment.doit" "Lab #4" 1103641864

// Turing Machine Definitions

symbols ( ) 0 1 first( unchecked( goleft goright // In general, less states will require more symbols

// Test tapes to check work

tape test1 (
result1 test1 0

tape test2 )
result1 test2 0

tape test3 ( )
result1 test3 1

tape test4 ) (
result1 test4 0

tape test5 ( ) ( ) ( ( ( ) ) ( ) ) ) ( )
result1 test5 0

tape test6 ( ) ( ( ( ) ( ( ( ) ) ( ) ) )
result1 test6 0

tape test7 ( ) ( ( ) ( ( ( ) ) ( ) ) )
result1 test7 1

// Define additional symbols, states and actions

// We will employ and utilize 2 states here
// State S0: Move to the right and mark all symbols until the first ")" is found, then move to the left and unmark all symbols until the first marked "(" is found
// State S1: Move to the left and check if everything has been matched or not
states S0 S1 // List of state names, first is starting state

action S0 - *halt* 1 - // Accept on empty string and on balanced parentheses
action S0 ( S1 first( l // Replace the first open "(" with "first(" and go to S1
action S0 ) *halt* 0 - // Reject if found unbalanced ")"
action S0 goleft S0 goright r // Go left
action S0 goright S0 goleft l // Go right


action S1 ( S1 unchecked( l // Replace "(" with "unchecked(" and continue...
action S1 ) S1 goright r // ...until the first ")", replace it with "goleft" and go to the left
action S1 unchecked( S1 goleft l // If found matching "(" bracket, go to the right and search for another ")"
action S1 - *halt* 0 - // Reject if no ")" found for the first "first("
action S1 first( S0 goleft l // This must be the last match, go to S0 and check if it is true
action S1 goleft S1 goright r // Go left
action S1 goright S1 goleft l // Go right