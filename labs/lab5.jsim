* Lab 5: 32-Bit Beta CPU RISC-V Architecture Design
* All of the components have been equipped with their proper respective support for transfers of control, connected by the Beta's datapath (this ensures that the whole Beta checkoff passes, even if individual component checkoffs do not pass anymore due to the additional arguments)
* Memory Unit (ROM & RAM) is not included here since it is supplied by lab5checkoff.jsim (both instruction memory and data memory)

* Do not include nominal.jsim and stdcell.jsim again since it will cause duplicate device name errors (they are already imported by lab3.jsim)
* Remember to exclude the lab3checkoff_10.jsim file in the lab3.jsim dependency file
// .include "../lib/nominal.jsim"
// .include "../lib/stdcell.jsim"
.include "../lib/lab5checkoff.jsim"
.include "./lab3.jsim"

// Begin Defining Utility Gates
.subckt and5 a b c d e output
Xand0 a b c d x and4
Xand1 x e output and2
.ends

.subckt mux5 s2 s1 s0 a b c d e output
Xmuxa s0 s1 a b c d z mux4
Xmuxb s2 z e output mux2
.ends
// End Defining Utility Gates

// Program Counter Circuitry
.subckt pc clk reset pcsel[2:0] xadr[31:0] illop[31:0] jt[31:0] c[31:0]
+ ia[31:0] pcbig[31:0] pcfour[31:0]

* PC + 4 as pcfour
* bin(4) == 0b100
Xaddfour 0 ia[31:0] 0#29 vdd 0#2 pcfour[31:0] throwaway_z throwaway_v throwaway_n adder32

* PC + 4 + 4 * SEXT(C) as pcbig (also called as branch-offset input)
* mul(C,4) == lshift(C,2)
Xbuffer c[29:0] sextfour[31:2] buffer
.connect 0 sextfour[1:0]
Xaddsext 0 sextfour[31:0] pcfour[31:0] pcbig[31:0] another_throwaway_z another_throwaway_v another_throwaway_n adder32

* Supervisor bit
* New PC31 is 1 only when both old PC31 and JT31 are 1s
* This is to ensure that JMP instructions can only clear or leave the supervisor bit unchanged
Xjmp ia[31] jt[31] supervisor and2

* PC's 5-to-1 input multiplexer with PCSEL[2:0] as selector bits
Xmux pcsel[2]#32 pcsel[1]#32 pcsel[0]#32 pcfour[31:0] pcbig[31:0] supervisor jt[30:2] 0#2 illop[31:0] xadr[31:0] original_output[31:0] mux5

* Combine output with reset signal (if reset == 1, reset to 0x80000000 where output[31] == 1)
Xreset reset#32 original_output[31:0] vdd 0#31 output[31:0] mux2

* Add D-type latch (data register) for memory, so that only when there is a rising CLK edge, d -> q and thus output -> ia
Xpcreg output[31:0] clk#32 ia[31:0] dreg
.ends

// Register File Circuitry
.subckt regfile clk werf ra2sel ra[4:0] rb[4:0] rc[4:0]
+ wdata[31:0] radata[31:0] rbdata[31:0] wasel

Xregfile
+ vdd 0 0 ra[4:0] adata[31:0]       // A read port
+ vdd 0 0 ra2mux[4:0] bdata[31:0]   // B read port
+ 0 clk werf wa[4:0] wdata[31:0]    // write port
+ $memory width=32 nlocations=31

* Select Rb or Rc for 2nd read port depending on RA2SEL
Xra2sel ra2sel#5 rb[4:0] rc[4:0] ra2mux[4:0] mux2

* If R31 (0b11111), use AND gate output as selector to give all 0 for radata and rbdata
Xra_r31 ra[4:0] ra_r31 and5
Xra2sel_r31 ra2mux[4:0] ra2sel_r31 and5

* Two 2-to-1 multiplexers to output the correct radata and rbdata
Xra_data ra_r31#32 adata[31:0] 0#32 radata[31:0] mux2
Xrb_data ra2sel_r31#32 bdata[31:0] 0#32 rbdata[31:0] mux2

* Select XP (register 30: 0b11110) as destination register file write address during exceptions (depending on WASEL)
Xwasel wasel#5 rc[4:0] vdd#4 0 wa[4:0] mux2
.ends

// Control Logic Unit (CU) Circuitry
.subckt ctl reset z id[31:26] ra2sel bsel alufn[5:0] wdsel[1:0] werf moe wr
+ pcsel[2:0] wasel asel

* Implement this as ROM: https://www.dropbox.com/s/2txzo6r3aeynguy/CU_2.png
* Follow OPCODEs specified by the official Beta documentation
* We set PCSEL as bin(3) == 0b011, WASEL as 1 and WERF as 1 if it is an illegal/unimplemented operation (raise exception if non-existent OPCODE)
* Otherwise:
* For Type 1 (OP) instructions, we set BSEL as 0
* For Type 2 (OPC) instructions, we set BSEL as 1
* WDSEL is 01 for all valid instructions except for LD/LDR (10) and ST (00) - this is because WDSEL == 01 would get the output from ALU instead of from data memory
* WR and RA2SEL are 1s only for ST instruction
* ASEL is 1 only for LDR instruction
* WERF is 0 only for ST instruction (since WERF == 1 if values need to be stored in the register for all mathematical and logical operations)
* MOE (Memory Output Enable) is 1 only for LD instruction to read memory location specified by ma[31:0]
* WR (Memory Write Enable) is 1 only for ST instruction to store into memory location specified by ma[31:0] at the end of the current cycle
* If there is IRQ signal, we settle in the beta's subckt
Xctl vdd 0 0 id[31:26]	            // one read port
+ zpcsel[2:0] wasel asel ra2sel bsel alufn[5:0] wdsel[1:0] werf moe xwr
+ $memory width=18 nlocations=64 contents=(
+  0b011100000000000100             // opcode=0b000000
+  0b011100000000000100             // opcode=0b000001
+  0b011100000000000100             // opcode=0b000010
+  0b011100000000000100             // opcode=0b000011
+  0b011100000000000100             // opcode=0b000100
+  0b011100000000000100             // opcode=0b000101
+  0b011100000000000100             // opcode=0b000110
+  0b011100000000000100             // opcode=0b000111
+  0b011100000000000100             // opcode=0b001000
+  0b011100000000000100             // opcode=0b001001
+  0b011100000000000100             // opcode=0b001010
+  0b011100000000000100             // opcode=0b001011
+  0b011100000000000100             // opcode=0b001100
+  0b011100000000000100             // opcode=0b001101
+  0b011100000000000100             // opcode=0b001110
+  0b011100000000000100             // opcode=0b001111
+  0b011100000000000100             // opcode=0b010000
+  0b011100000000000100             // opcode=0b010001
+  0b011100000000000100             // opcode=0b010010
+  0b011100000000000100             // opcode=0b010011
+  0b011100000000000100             // opcode=0b010100
+  0b011100000000000100             // opcode=0b010101
+  0b011100000000000100             // opcode=0b010110
+  0b011100000000000100             // opcode=0b010111
+  0b000000100000010110             // opcode=0b011000 LD
+  0b000001100000000001             // opcode=0b011001 ST
+  0b011100000000000100             // opcode=0b011010
+  0b010000000000000100             // opcode=0b011011 JMP
+  0b011100000000000100             // opcode=0b011100
+  0b000000000000000100             // opcode=0b011101 BEQ
+  0b000000000000000100             // opcode=0b011110 BNE
+  0b000010001101010110             // opcode=0b011111 LDR
+  0b000000000000001100             // opcode=0b100000 ADD
+  0b000000000000101100             // opcode=0b100001 SUB
+  0b000000000001001100             // opcode=0b100010 MUL
+  0b011100000000000100             // opcode=0b100011 DIV (unimplemented - possible hardware-based circuit algorithms: restoring array, non-restoring array, series expansion or Newton-Raphson)
+  0b000000011001101100             // opcode=0b100100 CMPEQ
+  0b000000011010101100             // opcode=0b100101 CMPLT
+  0b000000011011101100             // opcode=0b100110 CMPLE
+  0b011100000000000100             // opcode=0b100111
+  0b000000001100001100             // opcode=0b101000 AND
+  0b000000001111001100             // opcode=0b101001 OR
+  0b000000001011001100             // opcode=0b101010 XOR
+  0b011100000000000100             // opcode=0b101011
+  0b000000010000001100             // opcode=0b101100 SHL
+  0b000000010000101100             // opcode=0b101101 SHR
+  0b000000010001101100             // opcode=0b101110 SRA
+  0b011100000000000100             // opcode=0b101111
+  0b000000100000001100             // opcode=0b110000 ADDC
+  0b000000100000101100             // opcode=0b110001 SUBC
+  0b000000100001001100             // opcode=0b110010 MULC
+  0b011100000000000100             // opcode=0b110011 DIVC (unimplemented - possible hardware-based circuit algorithms: restoring array, non-restoring array, series expansion or Newton-Raphson)
+  0b000000111001101100             // opcode=0b110100 CMPEQC
+  0b000000111010101100             // opcode=0b110101 CMPLTC
+  0b000000111011101100             // opcode=0b110110 CMPLEC
+  0b011100000000000100             // opcode=0b110111
+  0b000000101100001100             // opcode=0b111000 ANDC
+  0b000000101111001100             // opcode=0b111001 ORC
+  0b000000101011001100             // opcode=0b111010 XORC
+  0b011100000000000100             // opcode=0b111011
+  0b000000110000001100             // opcode=0b111100 SHLC
+  0b000000110000101100             // opcode=0b111101 SHRC
+  0b000000110001101100             // opcode=0b111110 SRAC
+  0b011100000000000100             // opcode=0b111111
+ )

* Force WR to be reset to 0 when RESET == 1
Xreset reset xwr 0 wr mux2

* Implement logic to switch between BNE and BEQ based on the Z signal
* For BEQ: PCSEL = z ? 1 : 0
* For BNE: PCSEL = z ? 0 : 1
* This is an optimized implementation with a lower theoretical area-delay product since we relay most of the computation to process the selector bit (and thus, we require less multiplexers)
* This circuit is using 1 inverter, 1 AND4 gate, 1 XOR2 gate, 1 XNOR2 gate, 1 AND3 gate and 3 MUX2, which has a theoretical area-delay product of 81.9 ns*u^2
* Instead of a naive approach of using 2 AND3 gates, 2 AND4 gates, 4 inverters, 6 MUX2 and 3 MUX4, which has a theoretical area-delay product of 246.48 ns*u^2 (or 230.88 ns*u^2 if we eliminate 1 inverter and 1 AND4 gate)
Xinv_id31 id[31] not_id[31] inverter
Xeliminate_jmp not_id[31] id[30:28] nojmp and4
Xeliminate_ldr id[27:26] noldr xor2
Xbranch id[26] z difference xnor2
Xoutput nojmp noldr difference choice and3
Xpcsel choice#3 zpcsel[2:0] 0#2 vdd pcsel[2:0] mux2
.ends

// Final Beta With All Combined Components
.subckt beta clk reset irq ia[31:0] id[31:0] ma[31:0]
+ moe mrd[31:0] wr mwd[31:0]

* Create 0x80000004 for ILLOP
Xillop vdd 0#28 vdd 0#2 illop[31:0] buffer

* Create 0x80000008 for XAdr
Xxadr vdd 0#27 vdd 0#3 xadr[31:0] buffer

* Apply sign extension to id[15:0]
.connect id[15] sextc[31:16]
Xsextc1 id[15:0] sextc[15:0] buffer

* Add pre-defined components: PC, REGFILE & CTL
Xpc clk reset pcsel[2:0] xadr[31:0] illop[31:0] radata[31:0] sextc[31:0] ia[31:0] pcbig[31:0] pcfour[31:0] pc
Xregfile clk werf ra2sel id[20:16] id[15:11] id[25:21] wdata[31:0] radata[31:0] mwd[31:0] wasel regfile
Xctl reset z id[31:26] ra2sel bsel alufn[5:0] temp_wdsel[1:0] temp_werf moe temp_wr temp_pcsel[2:0] temp_wasel asel ctl

* Get z signal
Xz0 radata[0:7] radata[8:15] radata[16:23] radata[24:31] z_temp[0:7] or4
Xz1 z_temp[0:1] z_temp[2:3] z_temp[4:5] z_temp[6:7] output[0:1] or4
Xz output[0] output[1] z nor2

* Add multiplexers to connect all relevant control signals (ASEL, BSEL & WDSEL)
Xasel asel#32 radata[31:0] 0 pcbig[30:0] adata[31:0] mux2
Xbsel bsel#32 mwd[31:0] sextc[31:0] bdata[31:0] mux2
Xwdsel wdsel[0]#32 wdsel[1]#32 ia[31] pcfour[30:0] ma[31:0] mrd[31:0] 0#32 wdata[31:0] mux4

* Add ALU component
Xalu alufn[5:0] adata[31:0] bdata[31:0] ma[31:0] useless_z v n alu

* Resolve IRQ signals (interrupts) by utilizing multiplexers
* An interrupt should occur only when IRQ == 1 and PC31 == 0 (Beta is in user mode instead of supervisor mode)
* For IRQ requests:
* Set WERF to 1 (write into register file)
* Set WASEL to 1 (select XP as register file write address)
* Set WDSEL to 0 (select pcfour as data to write into register file)
* Set WR to 0 (ensure that interrupted ST instruction does not get to write into main memory)
* Set PCSEL to bin(4) == 0b100 (XAdr as next PC)
Xgetmode ia[31] mode inverter
Xgetinterrupt irq mode interrupt and2
Xirq_werf interrupt temp_werf vdd werf mux2
Xirq_wasel interrupt temp_wasel vdd wasel mux2
Xirq_wdsel interrupt#2 temp_wdsel[1:0] 0#2 wdsel[1:0] mux2
Xirq_wr interrupt temp_wr 0 wr mux2
Xirq_pcsel interrupt#3 temp_pcsel[2:0] vdd 0#2 pcsel[2:0] mux2
.ends