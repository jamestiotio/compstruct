* Lab 5: 32-Bit Beta CPU RISC-V Architecture Design
* All of the components have been equipped with their proper respective support for transfers of control, connected by the Beta's datapath (this ensures that the whole Beta checkoff passes, even if individual component checkoffs do not pass anymore due to the additional arguments)
* Memory Unit (ROM & RAM) is not included here since it is supplied by lab5checkoff.jsim (both instruction memory and data memory)

* Do not include nominal.jsim and stdcell.jsim again since it will cause duplicate device name errors (they are already imported by lab3.jsim)
* Remember to exclude the lab3checkoff_10.jsim file in the lab3.jsim dependency file
* Order of include lines are important so as to not encounter any errors of missing dependencies
// .include "../lib/nominal.jsim"
// .include "../lib/stdcell.jsim"
.include "../lib/lab5checkoff.jsim"
.include "./lab3.jsim"
.include "./lab5utility.jsim"
.include "./lab5pc.jsim"
.include "./lab5regfile.jsim"
.include "./lab5ctl.jsim"

// Final Beta With All Combined Components
.subckt beta clk reset irq ia[31:0] id[31:0] ma[31:0]
+ moe mrd[31:0] wr mwd[31:0]

* Create 0x80000004 for ILLOP
Xillop vdd 0#28 vdd 0#2 illop[31:0] buffer

* Create 0x80000008 for XAdr
Xxadr vdd 0#27 vdd 0#3 xadr[31:0] buffer

* Apply sign extension to id[15:0]
.connect id[15] sextc[31:16]
Xsextc1 id[15:0] sextc[15:0] buffer

* Add pre-defined components: PC, REGFILE & CTL
Xpc clk reset pcsel[2:0] xadr[31:0] illop[31:0] radata[31:0] sextc[31:0] ia[31:0] pcbig[31:0] pcfour[31:0] pc
Xregfile clk werf ra2sel id[20:16] id[15:11] id[25:21] wdata[31:0] radata[31:0] mwd[31:0] wasel regfile
Xctl reset z id[31:26] ra2sel bsel alufn[5:0] temp_wdsel[1:0] temp_werf moe temp_wr temp_pcsel[2:0] temp_wasel asel ctl

* Get z signal
Xz0 radata[0:7] radata[8:15] radata[16:23] radata[24:31] z_temp[0:7] or4
Xz1 z_temp[0:1] z_temp[2:3] z_temp[4:5] z_temp[6:7] output[0:1] or4
Xz output[0] output[1] z nor2

* Add multiplexers to connect all relevant control signals (ASEL, BSEL & WDSEL)
Xasel asel#32 radata[31:0] 0 pcbig[30:0] adata[31:0] mux2
Xbsel bsel#32 mwd[31:0] sextc[31:0] bdata[31:0] mux2
Xwdsel wdsel[0]#32 wdsel[1]#32 ia[31] pcfour[30:0] ma[31:0] mrd[31:0] 0#32 wdata[31:0] mux4

* Add ALU component
Xalu alufn[5:0] adata[31:0] bdata[31:0] ma[31:0] useless_z v n alu

* Resolve IRQ signals (interrupts) by utilizing multiplexers
* An interrupt should occur only when IRQ == 1 and PC31 == 0 (Beta is in user mode instead of supervisor mode)
* For IRQ requests:
* Set WERF to 1 (write into register file)
* Set WASEL to 1 (select XP as register file write address)
* Set WDSEL to 0 (select pcfour as data to write into register file)
* Set WR to 0 (ensure that interrupted ST instruction does not get to write into main memory)
* Set PCSEL to bin(4) == 0b100 (XAdr as next PC)
Xgetmode ia[31] mode inverter
Xgetinterrupt irq mode interrupt and2
Xirq_werf interrupt temp_werf vdd werf mux2
Xirq_wasel interrupt temp_wasel vdd wasel mux2
Xirq_wdsel interrupt#2 temp_wdsel[1:0] 0#2 wdsel[1:0] mux2
Xirq_wr interrupt temp_wr 0 wr mux2
Xirq_pcsel interrupt#3 temp_pcsel[2:0] vdd 0#2 pcsel[2:0] mux2
.ends