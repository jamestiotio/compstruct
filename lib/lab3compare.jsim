.checkoff "" "Lab #3: compare" 0

.verify cmp[31:0] periodic(9.9E-8,1.0000000000000001E-7)
+ 0x0 0x0 0x0 0x0 0x1 0x1 0x1 0x1
+ 0x0 0x1 0x1 0x0 0x0 0x1 0x1 0x0
+ 0x0 0x1 0x1 0x0 0x1 0x1 0x1 0x1

* instantiate adder32
Xcompare alufn[2:1] z v n cmp[31:0] compare32

* Generate sample 32-bit inputs for A and B and try different control settings

Wa z v n nrz(0,3.3,100n,0n,.1n,.1n)
+ 0x0 0x1 0x2 0x3 0x4 0x5 0x6 0x7
+ 0x0 0x1 0x2 0x3 0x4 0x5 0x6 0x7
+ 0x0 0x1 0x2 0x3 0x4 0x5 0x6 0x7

Wb alufn[2:1] nrz(0,3.3,100n,0n,.1n,.1n)
+ 0x1 0x1 0x1 0x1 0x1 0x1 0x1 0x1   // CMPEQ (Z)
+ 0x2 0x2 0x2 0x2 0x2 0x2 0x2 0x2   // CMPLT (N xor V)
+ 0x3 0x3 0x3 0x3 0x3 0x3 0x3 0x3   // CMPLE (Z or (N xor V))

* Run the simulation long enough to test all input values
.tran 2400n

* Some useful plots... you can plot additional signals by specifying
* the appropriate .plot commands in your main netlist file.
.plot z
.plot v
.plot n
.plot L(cmp[31:0])
